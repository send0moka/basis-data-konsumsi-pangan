<x-layouts.app title="Prediksi Konsumsi Pangan NBM">
    <flux:header container class="border-b border-zinc-200 dark:border-zinc-700">
        <flux:heading size="xl">
            <flux:icon name="cpu-chip" class="mr-2" />
            Prediksi Konsumsi Pangan NBM
        </flux:heading>
        <flux:subheading class="text-zinc-600 dark:text-zinc-400">
            Sistem prediksi berbasis Machine Learning untuk konsumsi kalori pangan dengan akurasi tinggi
        </flux:subheading>
        
        <flux:spacer />
        
        <div class="flex items-center gap-3">
            <div class="flex items-center gap-2">
                <flux:badge size="sm" color="green" id="api-status-badge">
                    <flux:icon name="signal" class="size-3" />
                    <span id="api-status-text">Checking...</span>
                </flux:badge>
                <flux:button size="sm" variant="ghost" onclick="checkApiHealth()">
                    <flux:icon name="arrow-path" class="size-4" />
                </flux:button>
            </div>
        </div>
    </flux:header>


    <flux:main container class="space-y-6">
        <!-- Model Statistics -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <flux:card class="text-center">
                <flux:icon name="chart-bar" class="mx-auto mb-3 text-green-500" size="lg" />
                <flux:heading size="lg" id="model-accuracy">Loading...</flux:heading>
                <flux:subheading>Model Accuracy</flux:subheading>
            </flux:card>
            
            <flux:card class="text-center">
                <flux:icon name="target" class="mx-auto mb-3 text-blue-500" size="lg" />
                <flux:heading size="lg" id="model-mape">Loading...</flux:heading>
                <flux:subheading>MAPE</flux:subheading>
            </flux:card>
            
            <flux:card class="text-center">
                <flux:icon name="server" class="mx-auto mb-3 text-yellow-500" size="lg" />
                <flux:heading size="lg" id="training-records">Loading...</flux:heading>
                <flux:subheading>Training Data</flux:subheading>
            </flux:card>
            
            <flux:card class="text-center">
                <flux:icon name="cog" class="mx-auto mb-3 text-gray-500" size="lg" />
                <flux:heading size="sm" id="model-type">Loading...</flux:heading>
                <flux:subheading>Model Type</flux:subheading>
            </flux:card>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Prediction Interface -->
            <div class="lg:col-span-2">
                <flux:card>
                    <flux:card.header>
                        <flux:heading>
                            <flux:icon name="sparkles" class="mr-2" />
                            Input Data Prediksi
                        </flux:heading>
                    </flux:card.header>
                    
                    <flux:card.body class="space-y-6">
                        <flux:banner variant="info">
                            <flux:icon name="information-circle" />
                            <div>
                                <strong>Petunjuk:</strong> Masukkan data konsumsi kalori 6 bulan terakhir (dalam urutan kronologis) untuk mendapatkan prediksi bulan berikutnya.
                            </div>
                        </flux:banner>

                        <form id="prediction-form" class="space-y-4">
                            <div id="data-inputs">
                                <!-- Data inputs will be generated by JavaScript -->
                            </div>

                            <flux:button type="submit" variant="primary" size="lg" class="w-full" id="predict-btn">
                                <flux:icon name="sparkles" class="mr-2" />
                                Prediksi Konsumsi Bulan Depan
                            </flux:button>
                        </form>
                    </flux:card.body>
                </flux:card>
            </div>

            <div class="space-y-4">
                <!-- Prediction Result -->
                <flux:card>
                    <flux:card.header>
                        <flux:heading>
                            <flux:icon name="chart-bar" class="mr-2" />
                            Hasil Prediksi
                        </flux:heading>
                    </flux:card.header>
                    
                    <flux:card.body id="prediction-result">
                        <div class="text-center text-gray-500 py-8">
                            <flux:icon name="chart-line" class="mx-auto mb-4 opacity-25" size="2xl" />
                            <p>Silakan masukkan data dan klik tombol prediksi untuk melihat hasil.</p>
                        </div>
                    </flux:card.body>
                </flux:card>

                <!-- Quick Actions -->
                <flux:card>
                    <flux:card.header>
                        <flux:heading size="sm">
                            <flux:icon name="bolt" class="mr-2" />
                            Quick Actions
                        </flux:heading>
                    </flux:card.header>
                    
                    <flux:card.body class="space-y-2">
                        <flux:button variant="ghost" size="sm" class="w-full justify-start" onclick="loadSampleData()">
                            <flux:icon name="document-arrow-down" class="mr-2" />
                            Load Sample Data
                        </flux:button>
                        
                        <flux:button variant="ghost" size="sm" class="w-full justify-start" onclick="clearAllData()">
                            <flux:icon name="trash" class="mr-2" />
                            Clear All Data
                        </flux:button>
                        
                        <flux:button variant="ghost" size="sm" class="w-full justify-start" onclick="exportPrediction()" id="export-btn" disabled>
                            <flux:icon name="arrow-down-tray" class="mr-2" />
                            Export Result
                        </flux:button>
                    </flux:card.body>
                </flux:card>
            </div>
        </div>
    </flux:main>

    <!-- Loading Modal -->
    <flux:modal name="loading" :close="false">
        <flux:modal.body class="text-center py-8">
            <div class="flex justify-center mb-4">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
            <flux:heading>Memproses Prediksi...</flux:heading>
            <flux:subheading>Model sedang menganalisis data Anda</flux:subheading>
        </flux:modal.body>
    </flux:modal>

@push('scripts')
<script>
let predictionData = null;

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    generateDataInputs();
    checkApiHealth();
    loadModelStats();
});

// Generate data input forms
function generateDataInputs() {
    const container = document.getElementById('data-inputs');
    const currentDate = new Date();
    
    let html = '';
    for (let i = 5; i >= 0; i--) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
        const monthYear = date.toLocaleDateString('id-ID', { year: 'numeric', month: 'long' });
        const monthNum = date.getMonth() + 1;
        const year = date.getFullYear();
        
        html += `
            <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border-l-4 border-blue-500" data-month="${monthNum}" data-year="${year}">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">${monthYear}</label>
                    </div>
                    <div>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" name="kelompok_${i}" required>
                            <option value="">Pilih Kelompok</option>
                            <option value="Padi-padian">Padi-padian</option>
                            <option value="Umbi-umbian">Umbi-umbian</option>
                            <option value="Ikan/udang/cumi/kerang">Ikan/udang/cumi/kerang</option>
                            <option value="Daging">Daging</option>
                            <option value="Telur dan susu">Telur dan susu</option>
                            <option value="Sayur-sayuran">Sayur-sayuran</option>
                            <option value="Kacang-kacangan">Kacang-kacangan</option>
                            <option value="Buah-buahan">Buah-buahan</option>
                            <option value="Minyak dan lemak">Minyak dan lemak</option>
                            <option value="Bahan minuman">Bahan minuman</option>
                            <option value="Bumbu-bumbuan">Bumbu-bumbuan</option>
                            <option value="Konsumsi lainnya">Konsumsi lainnya</option>
                        </select>
                    </div>
                    <div>
                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" name="komoditi_${i}" required>
                            <option value="">Pilih Komoditi</option>
                            <option value="Beras">Beras</option>
                            <option value="Jagung">Jagung</option>
                            <option value="Ubi kayu">Ubi kayu</option>
                            <option value="Ubi jalar">Ubi jalar</option>
                            <option value="Ikan segar">Ikan segar</option>
                            <option value="Ikan asin">Ikan asin</option>
                            <option value="Daging sapi">Daging sapi</option>
                            <option value="Daging ayam">Daging ayam</option>
                            <option value="Telur ayam">Telur ayam</option>
                            <option value="Susu">Susu</option>
                        </select>
                    </div>
                    <div>
                        <div class="relative">
                            <input type="number" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                                   name="kalori_${i}" placeholder="0.00" step="0.01" min="0" max="1000" required>
                            <span class="absolute right-3 top-2 text-sm text-gray-500">kcal/hari</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
}

// Check API health
async function checkApiHealth() {
    try {
        const response = await fetch('{{ route("prediksi.api.health") }}');
        const data = await response.json();
        
        const statusText = document.getElementById('api-status-text');
        const statusBadge = document.getElementById('api-status-badge');
        
        if (data.status === 'healthy') {
            statusText.textContent = 'Connected';
            statusBadge.className = statusBadge.className.replace(/color="\w+"/, 'color="green"');
        } else {
            statusText.textContent = 'Disconnected';
            statusBadge.className = statusBadge.className.replace(/color="\w+"/, 'color="red"');
        }
    } catch (error) {
        const statusText = document.getElementById('api-status-text');
        const statusBadge = document.getElementById('api-status-badge');
        statusText.textContent = 'Error';
        statusBadge.className = statusBadge.className.replace(/color="\w+"/, 'color="red"');
    }
}

// Load model statistics
async function loadModelStats() {
    try {
        const response = await fetch('{{ route("prediksi.api.stats") }}');
        const data = await response.json();
        
        if (data.success) {
            const stats = data.stats;
            document.getElementById('model-accuracy').textContent = stats.accuracy || 'N/A';
            document.getElementById('model-mape').textContent = stats.mape || 'N/A';
            document.getElementById('training-records').textContent = stats.training_records?.toLocaleString() || 'N/A';
            document.getElementById('model-type').textContent = stats.model_type || 'N/A';
        }
    } catch (error) {
        console.error('Failed to load model stats:', error);
    }
}

// Handle form submission
document.getElementById('prediction-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = [];
    
    // Collect form data
    for (let i = 0; i < 6; i++) {
        const row = document.querySelector(`[data-month][data-year]`);
        const month = parseInt(row.dataset.month);
        const year = parseInt(row.dataset.year);
        
        data.push({
            tahun: year,
            bulan: month,
            kelompok: formData.get(`kelompok_${i}`),
            komoditi: formData.get(`komoditi_${i}`),
            kalori_hari: parseFloat(formData.get(`kalori_${i}`))
        });
    }
    
    // Show loading modal
    $flux.modal('loading').show();
    
    try {
        const response = await fetch('{{ route("prediksi.api.predict") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token() }}'
            },
            body: JSON.stringify({ data: data })
        });
        
        const result = await response.json();
        
        if (result.success) {
            displayPredictionResult(result);
            predictionData = result;
            document.getElementById('export-btn').disabled = false;
        } else {
            throw new Error(result.message || 'Prediction failed');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    } finally {
        $flux.modal('loading').close();
    }
});

// Display prediction result
function displayPredictionResult(result) {
    const container = document.getElementById('prediction-result');
    const prediction = result.prediction;
    const confidence = result.confidence_interval;
    
    container.innerHTML = `
        <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-lg mb-4">
            <div class="text-center">
                <div class="text-4xl font-bold mb-1">${prediction.toFixed(2)}</div>
                <div class="text-lg opacity-90">kcal/hari</div>
            </div>
        </div>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Confidence Interval</label>
                <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-1">
                    <span>${confidence.lower.toFixed(2)} kcal</span>
                    <span>${confidence.upper.toFixed(2)} kcal</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full" style="width: 85%"></div>
                </div>
            </div>
            
            <div class="grid grid-cols-2 gap-2">
                <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3 text-center">
                    <div class="text-xs text-gray-500 mb-1">Model Accuracy</div>
                    <div class="font-semibold">${result.model_info.accuracy}</div>
                </div>
                <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3 text-center">
                    <div class="text-xs text-gray-500 mb-1">MAPE</div>
                    <div class="font-semibold">${result.model_info.mape}</div>
                </div>
            </div>
            
            <div class="text-center text-sm text-gray-500">
                ${new Date(result.timestamp).toLocaleString('id-ID')}
            </div>
        </div>
    `;
}

// Load sample data
function loadSampleData() {
    const sampleData = [
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 45.5 },
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 47.2 },
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 46.8 },
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 48.1 },
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 47.9 },
        { kelompok: 'Padi-padian', komoditi: 'Beras', kalori: 49.3 }
    ];
    
    sampleData.forEach((item, index) => {
        document.querySelector(`select[name="kelompok_${index}"]`).value = item.kelompok;
        document.querySelector(`select[name="komoditi_${index}"]`).value = item.komoditi;
        document.querySelector(`input[name="kalori_${index}"]`).value = item.kalori;
    });
}

// Clear all data
function clearAllData() {
    document.getElementById('prediction-form').reset();
    document.getElementById('prediction-result').innerHTML = `
        <div class="text-center text-gray-500 py-8">
            <flux:icon name="chart-line" class="mx-auto mb-4 opacity-25" size="2xl" />
            <p>Silakan masukkan data dan klik tombol prediksi untuk melihat hasil.</p>
        </div>
    `;
    predictionData = null;
    document.getElementById('export-btn').disabled = true;
}

// Export prediction result
function exportPrediction() {
    if (!predictionData) return;
    
    const data = {
        prediction: predictionData.prediction,
        confidence_interval: predictionData.confidence_interval,
        model_info: predictionData.model_info,
        input_summary: predictionData.input_summary,
        timestamp: predictionData.timestamp
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `nbm-prediction-${new Date().getTime()}.json`;
    link.click();
}
</script>
@endpush
</x-layouts.app>
